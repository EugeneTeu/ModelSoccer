// +-----+-----+-----+-----+-----+
// |     |  2  |  3  |  4  |     |
// +-----+-----+-----+-----+-----+
// |  1  |  5  |  6  |  7  |  11 |
// +-----+-----+-----+-----+-----+
// |     |  8  |  9  |  10 |     |
// +-----+-----+-----+-----+-----+
// 1 is team 1 goal
// 11 is team 2 goal
// 0 is out of bounds

var time = 6;
var ball = 6;
var possession = -1; // initially, undecided possession
var scores = [0, 0];
var positions = [6, 6];
hvar action_probabilities[2][5] = [
	10, 1, 9, 50, 30, // [Score, OwnGoal, MissKeepPossession, MissChangePossession, OutOfBounds]
	20, 1, 4, 50, 25 // each row must add up to 100
];

DecideFirstPossession = []i:{0, 1} @ TossCoin { possession = i; } -> Skip;

Move(i) =
	[positions[i] != 2 && positions[i] != 5 && positions[i] != 8] MoveLeft.i {
		if (possession == i) {
			ball = ball - 1;
		};
		positions[i] = positions[i] - 1;
	} -> TakeAction
 [] [positions[i] != 2 && positions[i] != 3 && positions[i] != 4] MoveUp.i {
		if (possession == i) {
			ball = ball - 3;
		};
		positions[i] = positions[i] - 3;
	} -> TakeAction
 [] [positions[i] != 4 && positions[i] != 7 && positions[i] != 10] MoveRight.i {
 		if (possession == i) {
			ball = ball + i;
		};
		positions[i] = positions[i] + 1;
 	} -> TakeAction
 [] [positions[i] != 8 && positions[i] != 9 && positions[i] != 10] MoveDown.i {
 		if (possession == i) {
 			ball = ball + 3;
 		};
 		positions[i] = positions[i] + 3;
 	} -> TakeAction
;

Shoot(i) = pcase {
	action_probabilities[i][0]: Score.i {
		ball = 6;
		positions[0] = 6;
		positions[1] = 6;
		possession = (possession + 1) % 2;
		scores[i]++;
	} -> TakeAction
	action_probabilities[i][1]: OwnGoal.i {
		ball = 6;
		positions[0] = 6;
		positions[1] = 6;
		possession = (possession + 1) % 2;
		scores[(i + 1) % 2]++;
	} -> TakeAction
	action_probabilities[i][2]: MissKeepPossession.i -> TakeAction
	action_probabilities[i][3]: MissChangePossession.i {
		ball = positions[(i + 1) % 2]; // Set ball to where opposing player is
		possession = (possession + 1) % 2; // Change possession
	} -> TakeAction
	action_probabilities[i][4]: OutOfBounds.i {
		if (i == 0) {
			ball = 7;
			positions[1] = 7;
		} else {
			ball = 5;
			positions[0] = 5;
		};
		possession = (possession + 1) % 2;
	} -> TakeAction
};

TakeTeamAction(i) = Move(i) [] [possession == i] Shoot(i);

TakeAction = [time > 0] Tick { time--; } -> pcase {
		[0.5]: TakeTeamAction(0)
		[0.5]: TakeTeamAction(1)
	} 
	[] [time <= 0] Skip;

PlayGame = DecideFirstPossession; TakeAction;

#define FirstTeamWin scores[0] > scores[1] && time <= 0;
#define SecondTeamWin scores[1] > scores[0] && time <= 0;
#define Draw scores[0] == scores[1] && time <= 0;

#assert PlayGame reaches FirstTeamWin;
#assert PlayGame reaches SecondTeamWin;
#assert PlayGame reaches Draw;

#assert PlayGame reaches FirstTeamWin with prob;
#assert PlayGame reaches SecondTeamWin with prob;
#assert PlayGame reaches Draw with prob;

#assert PlayGame deadlockfree;