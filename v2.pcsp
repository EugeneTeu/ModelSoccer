// +-----+-----+-----+-----+-----+
// |     |  2  |  3  |  4  |     |
// +-----+-----+-----+-----+-----+
// |  1  |  5  |  6  |  7  |  11 |
// +-----+-----+-----+-----+-----+
// |     |  8  |  9  |  10 |     |
// +-----+-----+-----+-----+-----+
// 1 is team 1 goal
// 11 is team 2 goal
// 0 is out of bounds

enum {na, team_1, team_2};

hvar time = 6;
var ball = 6;
var team_1_score = 0;
var team_2_score = 0;
var pos1 = 6;
var pos2 = 6;
var possession = na;

WhoStartFirst = []i:{team_1, team_2} @ TossCoin { possession = i; } -> Skip;

Move1 =  [pos1 != 2 && pos1 != 5 && pos1 != 8] MoveLeft.1 { if (possession == team_1) {ball = ball - 1;} ; pos1 = pos1 - 1; }  -> TakeAction
	[] [pos1 != 2 && pos1 != 3 && pos1 != 4] MoveUp.1 { if (possession == team_1) {ball = ball - 3;} ; pos1 = pos1 - 3; } -> TakeAction
	[] [pos1 != 4 && pos1 != 7 && pos1 != 10] MoveRight.1 { if (possession == team_1) {ball = ball + 1;} ; pos1 = pos1 + 1; } -> TakeAction
	[] [pos1 != 8 && pos1 != 9 && pos1 != 10] MoveDown.1 { if (possession == team_1) {ball = ball + 3;} ; pos1 = pos1 + 3; } -> TakeAction;

Team1 = Move1
	[] [possession == team_1] ShootTeam1;

ShootTeam1 = pcase {
	1: Score.1 {
		ball = 6;
		pos1 = 6;
		pos2 = 6;
		possession = team_2;
		team_1_score++;
	} -> TakeAction
	1: OwnGoal.1 {
		ball = 6;
		pos1 = 6;
		pos2 = 6;
		possession = team_1;
		team_2_score++;
	} -> TakeAction
	1: MissKeepPossession.1 -> TakeAction
	1: MissChangePossession.1 {
		// shoot, ball go to where pos 2 is
		ball = pos2;
		possession = team_2;
	} -> TakeAction
	1: OutOfBounds.1 {
		ball = 7;
		pos2 = 7;
		possession = team_2;
	} -> TakeAction
};

Move2 = [pos2 != 2 && pos2 != 5 && pos2 != 8] MoveLeft.2 { if (possession == team_2) {ball = ball - 1;} ; pos2 = pos2 - 1; }  -> TakeAction
	[] [pos2 != 2 && pos2 != 3 && pos2 != 4] MoveUp.2 { if (possession == team_2) {ball = ball - 3;} ; pos2 = pos2 - 3; } -> TakeAction
	[] [pos2 != 4 && pos2 != 7 && pos2 != 10] MoveRight.2 { if (possession == team_2) {ball = ball + 1;} ; pos2 = pos2 + 1; } -> TakeAction
	[] [pos2 != 8 && pos2 != 9 && pos2 != 10] MoveDown.2 { if (possession == team_2) {ball = ball + 3;} ; pos2 = pos2 + 3; } -> TakeAction;

Team2 = Move2
	[] [possession == team_2] ShootTeam2;

ShootTeam2 = pcase {
	1: Score.2 {
		ball = 6;
		pos1 = 6;
		pos2 = 6;
		possession = team_1;
		team_1_score++;
	} -> TakeAction
	1: OwnGoal.2 {
		ball = 6;
		pos1 = 6;
		pos2 = 6;
		possession = team_2;
		team_2_score++;
	} -> TakeAction
	1: MissKeepPossession.2 -> TakeAction
	1: MissChangePossession.2 {
		// shoot, ball go to where pos 1 is
		ball = pos1;
		possession = team_1;
	} -> TakeAction
	1: OutOfBounds.2 {
		ball = 5;
		pos1 = 5;
		possession = team_1;
	} -> TakeAction
};

PlayGame = WhoStartFirst; TakeAction; 
TakeAction = [time > 0] Tick { time--; } -> (Team1 [] Team2)
		[] [time <= 0] Skip;

#define Team1Win team_1_score > team_2_score && time <= 0;
#define Team2Win team_2_score > team_1_score && time <= 0;
#define Draw team_1_score == team_2_score && time <= 0;

#assert PlayGame reaches Team1Win;
#assert PlayGame reaches Team2Win;
#assert PlayGame reaches Draw;

#assert PlayGame reaches Team1Win with prob;
#assert PlayGame reaches Team2Win with prob;
#assert PlayGame reaches Draw with prob;

#assert PlayGame deadlockfree;