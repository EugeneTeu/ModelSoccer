// +-----+-----+-----+-----+-----+
// |     |  2  |  3  |  4  |     |
// +-----+-----+-----+-----+-----+
// |  1  |  5  |  6  |  7  |  11 |
// +-----+-----+-----+-----+-----+
// |     |  8  |  9  |  10 |     |
// +-----+-----+-----+-----+-----+
// 1 is team 1 goal
// 11 is team 2 goal
// 0 is out of bounds

hvar time = 6;
var ball = 6;
var possession = 0; // initially, undecided possession
var scores = [0, 0, 0]; // first element is dummy
var positions = [0, 6, 6]; // first element is dummy
hvar action_probabilities[3][5] = [
	20, 20, 20, 20, 20, // dummy element
	10, 1, 9, 50, 30, // [Score, OwnGoal, MissKeepPossession, MissChangePossession, OutOfBounds]
	20, 1, 4, 50, 25 // each row must add up to 100
];

DecideFirstPossession = []i:{1, 2} @ TossCoin { possession = i; } -> Skip;

Move(i) =
	[positions[i] != 2 && positions[i] != 5 && positions[i] != 8] MoveLeft.i {
		if (possession == i) {
			ball = ball - 1;
		};
		positions[i] = positions[i] - 1;
	} -> TakeAction
 [] [positions[i] != 2 && positions[i] != 3 && positions[i] != 4] MoveUp.i {
		if (possession == i) {
			ball = ball - 3;
		};
		positions[i] = positions[i] - 3;
	} -> TakeAction
 [] [positions[i] != 4 && positions[i] != 7 && positions[i] != 10] MoveRight.i {
 		if (possession == i) {
			ball = ball + i;
		};
		positions[i] = positions[i] + 1;
 	} -> TakeAction
 [] [positions[i] != 8 && positions[i] != 9 && positions[i] != 10] MoveDown.i {
 		if (possession == i) {
 			ball = ball + 3;
 		};
 		positions[i] = positions[i] + 3;
 	} -> TakeAction
;

Shoot(i) = pcase {
	action_probabilities[i][0]: Score.i {
		ball = 6;
		positions[1] = 6;
		positions[2] = 6;
		possession = (possession * 2) % 3;
		scores[i]++;
	} -> TakeAction
	action_probabilities[i][1]: OwnGoal.i {
		ball = 6;
		positions[1] = 6;
		positions[2] = 6;
		possession = (possession * 2) % 3; // hack
		scores[(i * 2) % 3]++;
	} -> TakeAction
	action_probabilities[i][2]: MissKeepPossession.i -> TakeAction
	action_probabilities[i][3]: MissChangePossession.i {
		ball = positions[(i * 2) % 3]; // Set ball to where opposing player is
		possession = (possession * 2) % 3; // Change possession
	} -> TakeAction
	action_probabilities[i][4]: OutOfBounds.i {
		if (i == 1) {
			ball = 7;
			positions[2] = 7;
		} else {
			ball = 5;
			positions[1] = 5;
		};
		possession = (possession * 2) % 3;
	} -> TakeAction
};

TakeTeamAction(i) = Move(i) [] [possession == i] Shoot(i);

PlayGame = DecideFirstPossession; TakeAction;
TakeAction = [time > 0] Tick { time--; } -> (TakeTeamAction(1) [] TakeTeamAction(2))
		[] [time <= 0] Skip;

#define Team1Win scores[1] > scores[2] && time <= 0;
#define Team2Win scores[2] > scores[1] && time <= 0;
#define Draw scores[1] == scores[2] && time <= 0;

#assert PlayGame reaches Team1Win;
#assert PlayGame reaches Team2Win;
#assert PlayGame reaches Draw;

#assert PlayGame reaches Team1Win with prob;
#assert PlayGame reaches Team2Win with prob;
#assert PlayGame reaches Draw with prob;

#assert PlayGame deadlockfree;